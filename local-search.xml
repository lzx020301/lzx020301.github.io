<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>利用ThreadLocal对公共字符填充作优化</title>
    <link href="/2022/10/29/ThreadLocal%E4%BC%98%E5%8C%96/"/>
    <url>/2022/10/29/ThreadLocal%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<span class="label label-primary">Java</span><h1 id="利用ThreadLocal对公共字符填充作优化"><a href="#利用ThreadLocal对公共字符填充作优化" class="headerlink" title="利用ThreadLocal对公共字符填充作优化"></a>利用ThreadLocal对公共字符填充作优化</h1><h2 id="过去的写法"><a href="#过去的写法" class="headerlink" title="过去的写法"></a>过去的写法</h2><blockquote><p>在过去，当要在后端进行例如，新增一个员工，修改一个员工操作，我们会接收到来自前端传进来的数据。</p><p>对于新增或者修改员工，会接收到一个员工对象，然后我们就会执行对应的方法</p><p>但是在这一步中，我们还需要对这个对象增加一些属性，例如当前的时间，进行新增或者修改操作的员工是谁</p><p>就拿新增举例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">save</span><span class="hljs-params">(HttpServletRequest request,<span class="hljs-meta">@RequestBody</span> Employee employee)</span>&#123;<br>       employee.setCreateTime(LocalDateTime.now());<br>       employee.setUpdateTime(LocalDateTime.now());<br>       employee.setCreateUser((Long) request.getSession().getAttribute(<span class="hljs-string">&quot;employee&quot;</span>));<br>       employee.setPassword(DigestUtils.md5DigestAsHex(<span class="hljs-string">&quot;123456&quot;</span>.getBytes(StandardCharsets.UTF_8)));<br>       employee.setUpdateUser((Long) request.getSession().getAttribute(<span class="hljs-string">&quot;employee&quot;</span>));<br><br>       employeeService.save(employee);<br><br>       <span class="hljs-keyword">return</span> R.success(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过上面这段代码可以看出，我们接收到employee对象后，还需要自己set创建时间，更新时间，创建人和更新人。</p><p>也就是说我们每写一个类似的新增或者插入方法，都得手动set一遍，这就显得很麻烦</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>对这个问题的解决方案也很简单，只需要给这些公共的字段添加注解@TableField(fill = FieldFill.INSERT)和@TableField(fill = FieldFill.INSERT_UPDATE)</p><p>第一个注解表示在进行insert操作时填入字段</p><p>第二个注解表示在进行insert和update的时候都填入字段</p><p>接下来实现一个MetaObjectHandler接口即可</p><p>关于MetaObjectHandler：</p><p>MetaObjectHandler接口是mybatisPlus为我们提供的的一个扩展接口，我们可以利用这个接口在我们插入或者更新数据的时候，为一些字段指定默认值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入操作自动填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        metaObject.setValue(<span class="hljs-string">&quot;createTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, id??);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新操作自动填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, id??);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>写到这一步后，就出现了一个问题，我们怎么拿到创建人的数据，回顾一下之前，我们都是从HttpServletRequest里通过getSession方法拿到ID</p><p>但是这里时一个普通的类，怎么能拿到呢</p><p>这个时候就需要用到ThreadLocal了</p></blockquote><h2 id="关于ThreadLocal"><a href="#关于ThreadLocal" class="headerlink" title="关于ThreadLocal"></a>关于ThreadLocal</h2><blockquote><p>关于ThreadLocal，很简单的解释就是，让一个数据在同一个线程内共享</p><p>也就是说两个不相关的类或者方法，他们运行在同一个线程里面，那么他们都可以从ThreadLocal中取得数据</p><p>那也就是说只要找到一个线程和我们的MetaObjectHandler是同一个线程，那么就可以进行数据共享，拿到id数据了</p><p>那么怎么找到另一个和MetaObjectHandle一样线程的方法呢</p><p>这里用到了另外一个很重要的知识：<strong>客户端每次发送HTTP请求，对应的在服务端都会分配一个新的线程来处理</strong></p><p>也就是说只要在一个http请求下运行的方法，就是一个线程的</p><p>这就好办了，当客户端发送update请求的时候，首先肯定会执行的就是filter过滤器方法，然后controller里面就会执行update方法，涉及到update操作</p><p>也会执行updateFill方法，这样一来，三个方法就在同一个线程</p><p>只需在filter里面往ThreadLocal里面加入当前用户id，那么updateFill方法就可以拿到数据了</p></blockquote><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前用户id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseContext</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentId</span><span class="hljs-params">(Long id)</span>&#123;<br>        threadLocal.set(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">getCurrentId</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入操作自动填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        metaObject.setValue(<span class="hljs-string">&quot;createTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新操作自动填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断登录状态</span><br>      <span class="hljs-keyword">if</span>(req.getSession().getAttribute(<span class="hljs-string">&quot;employee&quot;</span>) != <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-comment">//利用ThreadLocal存入当前id</span><br>          <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> (Long) req.getSession().getAttribute(<span class="hljs-string">&quot;employee&quot;</span>);<br>          BaseContext.setCurrentId(id);<br><br>          chain.doFilter(request, response);<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">save</span><span class="hljs-params">(HttpServletRequest request,<span class="hljs-meta">@RequestBody</span> Employee employee)</span>&#123;<br>       <span class="hljs-comment">//employee.setCreateTime(LocalDateTime.now());</span><br>       <span class="hljs-comment">//employee.setUpdateTime(LocalDateTime.now());</span><br>       <span class="hljs-comment">//employee.setCreateUser((Long) request.getSession().getAttribute(&quot;employee&quot;));</span><br>       employee.setPassword(DigestUtils.md5DigestAsHex(<span class="hljs-string">&quot;123456&quot;</span>.getBytes(StandardCharsets.UTF_8)));<br>       <span class="hljs-comment">//employee.setUpdateUser((Long) request.getSession().getAttribute(&quot;employee&quot;));</span><br><br>       employeeService.save(employee);<br><br>       <span class="hljs-keyword">return</span> R.success(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据id修改员工信息</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> employee</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PutMapping</span><br>   <span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">update</span><span class="hljs-params">(HttpServletRequest request,<span class="hljs-meta">@RequestBody</span> Employee employee)</span>&#123;<br>       <span class="hljs-comment">//employee.setUpdateTime(LocalDateTime.now());</span><br>       <span class="hljs-comment">//employee.setUpdateUser((Long) request.getSession().getAttribute(&quot;employee&quot;));</span><br>       employeeService.updateById(employee);<br><br>       <span class="hljs-keyword">return</span> R.success(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于登录的一些逻辑判断</title>
    <link href="/2022/10/29/%E5%85%B3%E4%BA%8E%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD/"/>
    <url>/2022/10/29/%E5%85%B3%E4%BA%8E%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="关于登录的一些逻辑判断"><a href="#关于登录的一些逻辑判断" class="headerlink" title="关于登录的一些逻辑判断"></a>关于登录的一些逻辑判断</h1><p>本篇笔记记录一下我在学&lt;瑞吉外卖&gt;项目时，对比之前javaweb时的一些记录</p><h2 id="关于过去的登录逻辑"><a href="#关于过去的登录逻辑" class="headerlink" title="关于过去的登录逻辑"></a>关于过去的登录逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/LoginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">remember</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        session.setAttribute(<span class="hljs-string">&quot;username&quot;</span> ,username);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(remember))&#123;<br>            <span class="hljs-type">Cookie</span> <span class="hljs-variable">username1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>,username);<br>            username1.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">7</span>);<br>            response.addCookie(username1);<br>        &#125;<br>        <span class="hljs-type">StudentService</span> <span class="hljs-variable">studentService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentService</span>();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> studentService.login(username, password);<br>        response.setContentType(<span class="hljs-string">&quot;text/HTML;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            writer.write(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;用户不存在，请注册&#x27;); location.href=&#x27;/StudentSystem/index.jsp&#x27;&lt;/script&gt;&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            writer.write(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;登录成功&#x27;)&lt;/script&gt;&quot;</span>);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/SelectAllServlet&quot;</span>).forward(request,response);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这是过去写的一个关于登录的Servlet，是我在学javaweb的时候写的一个很简陋的代码</p><p>虽然当时觉得还可以，但是现在来看不仅简陋，而且还不安全哈哈哈</p><p>这段代码的逻辑是获取请求路径上面的用户名和密码参数</p><p>然后将用户名和密码传入mapper层进行查询</p><p>最后判断一下是否查询出结果，如果查询出来就返回登录成功，如果不存在则返回登陆界面继续登录</p><p>当时还是用writer写的，然后用了请求转发（确实简陋啊）</p></blockquote><h2 id="关于上面代码的不安全性"><a href="#关于上面代码的不安全性" class="headerlink" title="关于上面代码的不安全性"></a>关于上面代码的不安全性</h2><blockquote><p> 首先就是密码没有经过任何加密处理，密码在数据库中以明文方式存在，如果数据库被泄露，那么所有用户的账号就等于被泄露</p><p>其次就是整个判断逻辑没有什么层次性，将用户名和密码一股脑的全传进去，利用一条sql语句进行查询</p></blockquote><h2 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h2><blockquote><p>首先，将用户传进来的密码进行md5加密处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> DigestUtils.md5DigestAsHex(employee.getPassword().getBytes(StandardCharsets.UTF_8));<br></code></pre></td></tr></table></figure><blockquote><p>然后new一个wrapper，用来封装查询条件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据username进行查询数据库</span><br>LambdaQueryWrapper&lt;Employee&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//封装查询条件</span><br>qw.eq(Employee::getUsername, employee.getUsername());<br><span class="hljs-comment">//调用查询getone</span><br><span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> employeeService.getOne(qw);<br></code></pre></td></tr></table></figure><blockquote><p>首先判断是否有这个用户，如果有这个用户，然后进行密码校验，注意此时的密码校验是两个经过md5码加密过后的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断用户是否存在</span><br>      <span class="hljs-keyword">if</span>(emp == <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;该用户不存在&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">//如果用户存在则进行密码校验</span><br>      <span class="hljs-keyword">if</span>(!emp.getPassword().equals(password))&#123;<br>          <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;密码输入错误&quot;</span>);<br>      &#125;<br></code></pre></td></tr></table></figure><blockquote><p>当用户名和密码都输入正确后，判断一下这个账号当前的状态如何，最后将用户信息存入session中返回</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断用户当前状态</span><br><span class="hljs-keyword">if</span>(emp.getStatus() == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;该账号已锁定&quot;</span>);<br>&#125;<br><br>request.getSession().setAttribute(<span class="hljs-string">&quot;employee&quot;</span>, emp.getId());<br><span class="hljs-keyword">return</span> R.success(emp);<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Employee&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@RequestBody</span> Employee employee)</span>&#123;<br>        <span class="hljs-comment">//将页面提交的代码进行md5加密处理</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> DigestUtils.md5DigestAsHex(employee.getPassword().getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-comment">//根据username进行查询数据库</span><br>        LambdaQueryWrapper&lt;Employee&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">//封装查询条件</span><br>        qw.eq(Employee::getUsername, employee.getUsername());<br>        <span class="hljs-comment">//调用查询getone</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> employeeService.getOne(qw);<br><br>        <span class="hljs-comment">//判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(emp == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;该用户不存在&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//如果用户存在则进行密码校验</span><br>        <span class="hljs-keyword">if</span>(!emp.getPassword().equals(password))&#123;<br>            <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;密码输入错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//判断用户当前状态</span><br>        <span class="hljs-keyword">if</span>(emp.getStatus() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> R.error(<span class="hljs-string">&quot;该账号已锁定&quot;</span>);<br>        &#125;<br><br>        request.getSession().setAttribute(<span class="hljs-string">&quot;employee&quot;</span>, emp.getId());<br>        <span class="hljs-keyword">return</span> R.success(emp);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/29/hello-world/"/>
    <url>/2022/10/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
